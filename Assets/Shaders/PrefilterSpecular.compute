float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
//生成[0,1]均匀分布的随机数
float2 Hammersley(uint i, uint N)
{
    return float2(float(i) / float(N), RadicalInverse_VdC(i));
}
//重要性采样获得采样方向
float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness;
    //根据GGX的cdf的反函数求得
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    //转球面坐标
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    //切空间转换到世界空间
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float DistributionGGX(float3 NdotH, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH2 = NdotH * NdotH;
    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return nom / denom;
}

[numthreads(1, 1, 1)]
void CSMainGGX(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id.xy / (float2)(_Resolution) + 0.5 / (float2)_Resolution;
    uint index = id.y * _Resolution + id.x;
    float3 dir = DirectionFromCubemapTexel(_Face, uv);

    float3 irradiance = float3(0, 0, 0);
    float3 N = dir;
    float3 R = N;
    float3 V = R;
    const uint SAMPLE_COUNT = 1024;
    float totalWeight = 0.0;
    float3 prefilteredColor =  0.0;

    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, _FilterMipRoughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0)
        {
            float NdotH = saturate(dot(N, H));
            float HdotV = saturate(dot(H, V));
            float D = DistributionGGX(NdotH, _FilterMipRoughness);
            float pdf = (D * NdotH / (4.0 * HdotV)) + 0.0001;
            float resolution = _SampleCubemapSize; // resolution of source cubemap (per face)
            float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
           // float mipLevel = _FilterMipRoughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel) ;
            //使用mip来采用是为了防止太多高亮噪点
            float mipLevel = _FilterMipRoughness == 0.0 ? 0.0 : 1.0 * log2(saSample / saTexel);
            prefilteredColor += _Cubemap.SampleLevel(_PointClamp, L, 0).rgb * NdotL;
            totalWeight += NdotL;
        }
    }

    prefilteredColor = prefilteredColor / totalWeight;
    _Reslut[index] = float4(prefilteredColor.xyz, 1.0);
}